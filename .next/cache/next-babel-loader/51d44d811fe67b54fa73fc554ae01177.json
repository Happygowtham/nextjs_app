{"ast":null,"code":"const MongoClient = require('mongodb').MongoClient;\n\nconst assert = require('assert');\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst jwtSecret = 'SUPERSECRETE20220';\nconst saltRounds = 10;\nconst url = process.env.url;\nconst dbName = process.env.dbName;\nconst client = new MongoClient(url, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection(process.env.dbcollection);\n  collection.findOne({\n    email\n  }, callback);\n}\n\nfunction authUser(db, email, password, hash, callback) {\n  const collection = db.collection(process.env.dbcollection);\n  bcrypt.compare(password, hash, callback);\n}\n\nexport default ((req, res) => {\n  if (req.method === 'POST') {\n    //login\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).send(bodyError.message);\n    }\n\n    client.connect(function (err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n      findUser(db, email, function (err, user) {\n        if (err) {\n          res.status(500).json({\n            error: true,\n            message: 'Error finding User'\n          });\n          return;\n        }\n\n        if (!user) {\n          res.status(404).json({\n            error: true,\n            message: 'User not found'\n          });\n          return;\n        } else {\n          authUser(db, email, password, user.password, function (err, match) {\n            if (err) {\n              res.status(500).json({\n                error: true,\n                message: 'Auth Failed'\n              });\n            }\n\n            if (match) {\n              const token = jwt.sign({\n                userId: user.userId,\n                email: user.email\n              }, jwtSecret, {\n                expiresIn: 3000 //50 minutes\n\n              });\n              res.status(200).json({\n                token\n              });\n              return;\n            } else {\n              res.status(401).json({\n                error: true,\n                message: 'Auth Failed'\n              });\n              return;\n            }\n          });\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.statusCode = 401;\n    res.end();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}